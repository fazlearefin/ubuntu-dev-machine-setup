---

# mount /tmp on tmpfs
- block:
    - name: clear the existing /tmp dir (1/5)
      ansible.builtin.shell: "/bin/rm -rf *"
      args:
        chdir: /tmp

    - name: copy systemd file (2/5)
      ansible.builtin.copy:
        src: /usr/share/systemd/tmp.mount
        dest: /lib/systemd/system/tmp.mount
        remote_src: True

    - name: create dir /etc/systemd/system/tmp.mount.d (3/5)
      ansible.builtin.file:
        path: /etc/systemd/system/tmp.mount.d
        state: directory

    - name: create tmp.mount custom options file (4/5)
      ansible.builtin.copy:
        dest: /etc/systemd/system/tmp.mount.d/options.conf
        content: |
          [Mount]
          Options=mode=1777,strictatime,nosuid,nodev,size=1024M

    - name: start and enable tmp.mount on boot (5/5)
      ansible.builtin.systemd:
        name: tmp.mount
        enabled: true
        state: started
        daemon_reload: true

- name: enable ufw firewall
  community.general.ufw:
    state: enabled


- block:
    - name: Check if /etc/default/apport exists
      ansible.builtin.stat:
        path: /etc/default/apport
      register: apport_file

    - name: Disable system crash reports
      ansible.builtin.lineinfile:
        dest: /etc/default/apport
        regexp: "^enabled=(0|1)"
        line: enabled=0
        state: present
      when: apport_file.stat.exists

# It may be desirable to set this to zero, so that application memory is retained as long as possible at the expense
# of the page cache. When there is still a memory shortage, the kernel can still use swapping.
- name: tune system swappiness
  ansible.posix.sysctl:
    name: vm.swappiness
    value: '0'
    state: present

- name: reduce space used by journald
  ansible.builtin.lineinfile:
    path: /etc/systemd/journald.conf
    regexp: '^#SystemMaxUse=$'
    line: SystemMaxUse=256M

- name: perform a dist upgrade
  ansible.builtin.apt:
    update_cache: true
    upgrade: dist
    force_apt_get: true

- name: install archiving tools
  ansible.builtin.apt:
    name: "{{ base_archiving_tools }}"
    state: present
    force_apt_get: true

- name: install productivity tools
  ansible.builtin.apt:
    name: "{{ base_productivity_tools }}"
    state: present
    force_apt_get: true

- name: install system tools
  ansible.builtin.apt:
    name: "{{ base_system_tools }}"
    state: present
    force_apt_get: true

- name: install system tools for laptop
  ansible.builtin.apt:
    name: "{{ base_system_tools_laptop }}"
    state: present
    force_apt_get: true
  when: laptop_mode

- name: install developer tools
  ansible.builtin.apt:
    name: "{{ base_developer_tools }}"
    state: present
    force_apt_get: true

- name: install developer tools pipx packages
  community.general.pipx:
    name: "{{ item }}"
  with_items: "{{ base_developer_tools_pipx  }}"
  become: true
  become_user: "{{ local_username  }}"

# Fix for bat syntax highlighting tool; Ubuntu packages it as batcat instead of just bat
- name: create symlink for bat
  ansible.builtin.file:
    src: /usr/bin/batcat
    dest: /usr/bin/bat
    state: link
    force: false

- name: create .ssh dir
  ansible.builtin.file:
    path: "~{{ local_username }}/.ssh"
    state: directory
    mode: '0700'
  become: true
  become_user: "{{ local_username }}"

- block:
    - name: Create directories for golang
      ansible.builtin.file:
        path: "~{{ local_username }}/{{ item }}"
        state: directory
      with_items:
        - go
        - go/src
        - go/bin

    - name: Make GOPATH available in .bashrc
      ansible.builtin.lineinfile:
        path: "~{{ local_username }}/.bashrc"
        line: "{{ item }}"
        create: true
      with_items:
        - export GOPATH=$HOME/go
        - export PATH=$PATH:$GOPATH/bin
  become: true
  become_user: "{{ local_username }}"

- name: install download tools
  ansible.builtin.apt:
    name: "{{ base_download_tools }}"
    state: present
    force_apt_get: true

- name: install media packages
  ansible.builtin.apt:
    name: "{{ base_media_tools }}"
    state: present
    force_apt_get: true

- block:
    - name: accept licence for virtualbox ext pack
      debconf:
        name: "virtualbox-ext-pack"
        question: "virtualbox-ext-pack/license"
        value: "true"
        vtype: "select"

    - name: install virtualization tools
      ansible.builtin.apt:
        name: "{{ base_virtualization_tools }}"
        state: present
        force_apt_get: true
        update_cache: true

    # add user to docker group to run docker commands without sudo
    # add user to vboxusers group so that user can attach usb devices to guest OS
    - name: add user to docker and vboxusers groups
      ansible.builtin.user:
        name: "{{ local_username }}"
        append: true
        groups:
          - docker
          - vboxusers

- name: Enable permanent night light settings
  ansible.builtin.command: "gsettings set org.gnome.settings-daemon.plugins.color {{ item.key }} {{ item.value }}"
  loop:
    - { key: 'night-light-enabled', value: "{{ base_permanent_night_light.night_light_enabled | string | lower }}" }
    - { key: 'night-light-schedule-automatic', value: "{{ base_permanent_night_light.night_light_schedule_automatic | string | lower }}" }
    - { key: 'night-light-schedule-from', value: "{{ base_permanent_night_light.night_light_schedule_from }}" }
    - { key: 'night-light-schedule-to', value: "{{ base_permanent_night_light.night_light_schedule_to }}" }
    - { key: 'night-light-temperature', value: "{{ base_permanent_night_light.night_light_temperature }}" }

  when: base_permanent_night_light.night_light_enabled
  become: true
  become_user: "{{ local_username }}"

# make fstrim run daily rather than the default weekly schedule for SSD longevity
- block:
    - name: enable fstrim.timer
      ansible.builtin.systemd:
        name: fstrim.timer
        state: started
        enabled: true

    - name: create systemd fstrim.timer override dir
      ansible.builtin.file:
        path: /etc/systemd/system/fstrim.timer.d
        state: directory
        owner: root
        group: root
        mode: 0755

    - name: create override.conf file for fstrim.timer
      ansible.builtin.copy:
        src: etc/systemd/system/fstrim.timer.d/override.conf
        dest: /etc/systemd/system/fstrim.timer.d/override.conf
        owner: root
        group: root
        mode: 0644

    - name: force systemd to reread configs
      ansible.builtin.systemd:
        daemon_reload: true

- name: make poetry create virtualenv dirs inside the project dir itself
  ansible.builtin.command: "poetry config virtualenvs.in-project true"
  become: true
  become_user: "{{ local_username }}"

- name: build and install golang binaries
  ansible.builtin.command: "go install {{ item }}"
  with_items: "{{ golang_tools }}"
  become: true
  become_user: "{{ local_username }}"

- name: build and install rust binaries using cargo
  community.general.cargo:
    name: "{{ item }}"
    locked: true
    state: latest
  with_items: "{{ rust_cargo_tools }}"
  become: true
  become_user: "{{ local_username }}"

# obsidian markdown editor
- block:
    - name: Fetch latest Obsidian .deb file URL
      ansible.builtin.uri:
        url: "{{ base_obsidian_download_base_url }}"
        return_content: true
      register: obsidian_latest_release

    - name: Extract Obsidian .deb file URL
      ansible.builtin.set_fact:
        obsidian_deb_url:  "{{ obsidian_latest_release.json.assets | selectattr('name', 'match', '.*\\.deb$') | map(attribute='browser_download_url') | first }}"

    - name: Download and install Obsidian
      ansible.builtin.apt:
        deb: "{{ obsidian_deb_url }}"
        state: present

...
